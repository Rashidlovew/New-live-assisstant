from flask import Flask, request, jsonify, send_file, send_from_directory
from flask_cors import CORS
import openai
import tempfile
import os
import requests
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from email.mime.text import MIMEText
import smtplib
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

openai.api_key = os.getenv("OPENAI_API_KEY")
ELEVEN_API_KEY = os.getenv("ELEVEN_API_KEY")

field_order = [
    "Date", "Briefing", "LocationObservations",
    "Examination", "Outcomes", "TechincalOpinion"
]

field_prompts = {
    "Date": "๐๏ธ ููุจุฏุฃ ุจุงูุชุงุฑูุฎุ ูุชู ููุน ุงูุญุงุฏุซ ุชูุฑูุจูุงุ",
    "Briefing": "๐๏ธ ุดูุฑูุง ูู. ูุงูุขูุ ูู ููููู ุฃู ุชุนุทููู ููุฌุฒูุง ููุง ุญุฏุซุ",
    "LocationObservations": "๐๏ธ ุฃุฑุณู ูุนุงููุฉ ุงููููุน ุญูุซ ุจูุนุงููุฉ ูููุน ุงูุญุงุฏุซ ุชุจูู ูุง ููู .....",
    "Examination": "๐๏ธ ุฃุฑุณู ูุชูุฌุฉ ุงููุญุต ุงูููู ... ุญูุซ ุจูุญุต ููุถูุน ุงูุญุงุฏุซ ุชุจูู ูุง ููู .....",
    "Outcomes": "๐๏ธ ุฃุฑุณู ุงููุชูุฌุฉ ุญูุซ ุฃูู ุจุนุฏ ุงููุนุงููุฉ ู ุฃุฌุฑุงุก ุงููุญูุต ุงููููุฉ ุงููุงุฒูุฉ ุชุจูู ูุง ููู:.",
    "TechincalOpinion": "๐๏ธ ุฃุฑุณู ุงูุฑุฃู ุงูููู."
}

sessions = {}

system_prompt = (
    "ุฃูุชู ูุณุงุนุฏ AI ูุชุฎุตุต ูู ูุณู ุงูููุฏุณุฉ ุงูุฌูุงุฆูุฉุ ุตูุชู ุทุจูุนู ูุฏุงูุฆุ ูุฃุณููุจู ูุฌูุน ุจูู ุงูููููุฉ ูุงูุชุนุงุทู ุงูุนููู."
    " ูููุชู ุงูุฃุณุงุณูุฉ ูู ูุณุงุนุฏุฉ ุงููุณุชุฎุฏู ูู ุชูุฏูู ูุนูููุงุช ูุชูุฑูุฑ ูููุ ูููู ุงูุฃูู ูู ุฐูู ูู ุฃู ูุดุนุฑ ุงููุณุชุฎุฏู ุจุงูุฏุนู ูุงูุฑุงุญุฉ ุฎูุงู ูุฐู ุงูุนูููุฉ."

    "**ุจุฏุก ุงููุญุงุฏุซุฉ:**"
    "ุงุจุฏุฆู ุงููุญุงุฏุซุฉ ุจุชุญูุฉ ูุฏูุฉ ููุจุงุฏุฑุฉ ุฅูุณุงููุฉ ุจุณูุทุฉ. ุนูู ุณุจูู ุงููุซุงู: 'ูุฑุญุจุงู ุจูุ ุฃูุง ููุง ููุณุงุนุฏุชู ูู ุฅุนุฏุงุฏ ุชูุฑูุฑู. ูุจู ุฃู ูุจุฏุฃ ูู ุงูุชูุงุตููุ ููู ุญุงูู ุงููููุ' ุฃู 'ุฃููุงู ุจูุ ุฃููู ุฃูู ุจุญุงุฌุฉ ูุชูุฏูู ูุนูููุงุช ูุชูุฑูุฑ. ุฃูุฏ ุฃู ุฃุทูุฆู ุนููู ุฃููุงูุ ุฃุชููู ุฃู ุชููู ุจุฎูุฑ.' ุงูุชุธุฑู ุฑุฏ ุงููุณุชุฎุฏู ุนูู ูุฐุง ุงููุฏุฎู ุงูุฃูููุ ูุชูุงุนูู ูุนู ุจุดูู ููุงุณุจ ููุฎุชุตุฑ."
    "ุจุนุฏ ูุฐุง ุงูุชูุงุนู ุงูุฃูููุ ุงูุชููู ูุทูุจ ุฃูู ูุนูููุฉ ุจุดูู ุณูุณ, ููู ุชุงุฑูุฎ ุงูุญุงุฏุซ, ูุณุชุฎุฏูุฉ ูููุทุฉ ุงูุทูุงู \"ููุจุฏุฃ ุจุงูุชุงุฑูุฎุ ูุชู ููุน ุงูุญุงุฏุซ ุชูุฑูุจูุงุ\" ูููู ุจุตูุงุบุชู ุงูุทุจูุนูุฉ. ูุฌุจ ุฃู ุชุฐูุฑู ูููุฉ 'ุงูุชุงุฑูุฎ' ุฃู 'ุชุงุฑูุฎ ุงูุญุงุฏุซ' ุนูุฏ ุทูุจ ูุฐู ุงููุนูููุฉ ูุฃูู ูุฑุฉ."

    "**ุฌูุน ุงููุนูููุงุช:**"
    "ุนูุฏูุง ูุญูู ููุช ุฌูุน ุงููุนูููุงุชุ ุชุฌูุจู ุชูุงููุง ุฃุณููุจ ุทุฑุญ ุงูุฃุณุฆูุฉ ุงููุจุงุดุฑุฉ ูุงููุชุชุงููุฉ ูุฃููู ุชููุฆูู ูุงุฆูุฉ. ูุฏูู ูู ุฃู ุชุฏูุฌู ุทูุจ ุงููุนูููุงุช ุถูู ุญูุงุฑ ุทุจูุนู ููุชุฏูู."
    "ููู ูุนูููุฉ ููุฏููุง ุงููุณุชุฎุฏู (ูุซูุงู ุนู 'ุงูุชุงุฑูุฎ'):"
    "1. ูุฏูู ุฅูุฑุงุฑูุง ูุงุถุญูุง ูููุฌุฒูุง ุจูุง ูุงูู ุงููุณุชุฎุฏู (ูุซูุงู: 'ุญุณููุงุ ุชุงุฑูุฎ ุงููุงูุนุฉ ูู [ุงูุชุงุฑูุฎ ุงูุฐู ุฐูุฑู ุงููุณุชุฎุฏู].')."
    "2. ุฅุฐุง ูุงูุช ุฅุฌุงุจุชู ูุฎุชุตุฑุฉ ุฌุฏูุง ุฃู ุบูุฑ ูุงุถุญุฉุ ุงุทุฑุญู ุณุคุงู ูุชุงุจุนุฉ ููุชูุญ ูุชุณุชูุถุญู ุฃูุซุฑ ุนู *ููุณ ุงูููุทุฉ* ูุจู ุงูุงูุชูุงู (ูุซูุงู: 'ูู ููููู ุชูุถูุญ ูุฐู ุงูููุทุฉ ุฃูุซุฑ ููููุงูุ')."
    "3. ุฅุฐุง ูุงูุช ุงููุนูููุฉ ูุงุถุญุฉุ ุฃู ุจุนุฏ ุงูุงุณุชูุถุงุญุ ูุฏูู ุชุนููููุง ูุตูุฑูุง ููุธูุฑ ุงูุชุนุงุทู ุฃู ุงูุงูุชูุงู (ูุซูุงู: 'ุดูุฑูุง ูู ุนูู ุชูุถูุญ ุฐูู.' ุฃู 'ุฃุชููู ุฃู ุชุฐูุฑ ูุฐู ุงูุชูุงุตูู ูุฏ ูููู ุตุนุจูุง.') ุซู ุงูุชููู ุจูุทู ูุทูุจ ุงููุนูููุฉ ุงูุชุงููุฉ."
    "ูุซุงู ููุงูุชูุงู: 'ุดูุฑูุง ููุดุงุฑูุชูุง ูุฐู ุงููุนูููุฉ. ุนูุฏูุง ุชููู ูุณุชุนุฏูุงุ ูู ูููููุง ุงูุชุญุฏุซ ููููุงู ุนู [ุงุณู ุงูุญูู ุงูุชุงูู ุจุตูุบุฉ ุทุจูุนูุฉุ ูุซูุงู \"ููุฎุต ุงูุญุงุฏุซ\" ุจุฏูุงู ูู Briefing]ุ' ุฃู 'ุฃุชููู. ุงูุขูุ ุฅุฐุง ุณูุญุชุ ููุชูู ุฅูู [ุงุณู ุงูุญูู ุงูุชุงูู ุจุตูุบุฉ ุทุจูุนูุฉ].'"
    "ุนูุฏ ุทูุจ ูุนูููุฉ ุฌุฏูุฏุฉุ ุงุณุชุฎุฏูู ูุต ุงูุณุคุงู ูู `field_prompts` ูุฏููู ูููุนูู ุงููุทููุจ ูููู ุฃุนูุฏู ุตูุงุบุชู ุจุฃุณููุจู ุงูุญูุงุฑู ุงูุทุจูุนู ุจุฏูุงู ูู ุชุฑุฏูุฏู ุญุฑููุงู."

    "**ุงูุฃุณููุจ ุงูุนุงู:**"
    "ุญุงูุธู ุนูู ูุฏูุฆู ูุตุจุฑู ุทูุงู ุงููุญุงุฏุซุฉ. ุดุฌุนู ุงููุณุชุฎุฏู ุนูู ุงูุชุญุฏุซ ุจุญุฑูุฉุ ูุฃูุฏู ูู ุฃู ุจุฅููุงูู ุฃุฎุฐ ููุชู."
    "ุชุฐูุฑูุ ุฃูุชู ูุณุชู ูุฌุฑุฏ ุขูุฉ ูุฌูุน ุงูุจูุงูุงุชุ ุจู ูุณุงุนุฏ ูุชุนุงุทู. ูุฌุจ ุฃู ูุดุนุฑ ุงููุณุชุฎุฏู ุฃูู ูุชุญุฏุซ ูุน ุดุฎุต ููุชู ุจู ุญููุง."
    "ูุฌุจ ุฌูุน ุงููุนูููุงุช ููุญููู ุงูุชุงููุฉ ุจุงูุชุฑุชูุจ: Date, Briefing, LocationObservations, Examination, Outcomes, TechincalOpinion."
    "ุนูุฏูุง ูุชู ุฌูุน ูู ุงูุญููู ุจูุฌุงุญุ ูููู ุจุชุฃููุฏ ุงุณุชูุงู ุงููุนูููุฉ ุงูุฃุฎูุฑุฉุ ุซู ุฃุนููู ุจุดูู ูุงุถุญ ููุฏู ุนู ุงูุชูุงู ุฌูุน ุงูุจูุงูุงุช ูุฃู ุงูุชูุฑูุฑ ุณูุชู ุฅุนุฏุงุฏู (ูุซูุงู: 'ุดูุฑูุง ุฌุฒููุงู ูู ุนูู ูู ูุฐู ุงููุนูููุงุช. โ ููุฏ ุชู ุงุณุชูุงู ุฌููุน ุงูุจูุงูุงุช ุงููุงุฒูุฉ. ุณุฃููู ุงูุขู ุจุฅุนุฏุงุฏ ุงูุชูุฑูุฑ ูู...')."
    "ุงุณุชุฎุฏูู ูุฐู ุงูุชุนูููุงุช ูู ูู ุฑุฏ ูู ุฑุฏูุฏู ูุถูุงู ุชุฌุฑุจุฉ ุณูุณุฉ ูุฏุงุนูุฉ ูููุณุชุฎุฏู."
)


def generate_response(messages):
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=messages,
        temperature=0.7
    )
    return response.choices[0].message.content

@app.route("/transcribe", methods=["POST"])
def transcribe():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    ext = os.path.splitext(file.filename)[1].lower()
    if ext not in ['.mp3', '.mp4', '.mpeg', '.mpga', '.m4a', '.wav', '.webm', '.ogg']:
        return jsonify({'error': 'Unsupported file type'}), 400
    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
        file.save(tmp.name)
        audio_path = tmp.name
    with open(audio_path, "rb") as f:
        transcript_response = openai.audio.transcriptions.create(model="whisper-1", file=f)
    os.remove(audio_path)
    return jsonify({"text": transcript_response.text})

@app.route("/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_id = data.get("user_id")
    user_message = data.get("message")

    if user_id not in sessions:
        sessions[user_id] = {
            "messages": [{"role": "system", "content": system_prompt}],
            "fields": {},
            "current": 0,
            "chat_state": "greeting"
        }
        if not user_message:
            user_message = "(ุจุฏุฃ ุงููุณุชุฎุฏู ุงููุญุงุฏุซุฉ)"

    session = sessions[user_id]
    messages = session["messages"]
    messages.append({"role": "user", "content": user_message})

    reply_content = ""

    if session.get("chat_state") == "greeting":
        print(f"DEBUG: UserID {user_id} in 'greeting' state. User message: '{user_message}'")
        reply_content = generate_response(messages)

        # Transition condition: AI's reply asks for the first field ("Date").
        # System prompt guides AI: "...ุงูุชููู ูุทูุจ ุฃูู ูุนูููุฉ ุจุดูู ุณูุณ, ููู ุชุงุฑูุฎ ุงูุญุงุฏุซ..."
        # Check if AI's reply contains keywords indicating it's asking for the date.
        # Keywords are based on field_prompts["Date"] and system_prompt guidance.
        first_field_keywords = ["ุงูุชุงุฑูุฎ", "ุชุงุฑูุฎ ุงูุญุงุฏุซ", "ูุชู ููุน", field_prompts["Date"]]
        if any(keyword in reply_content for keyword in first_field_keywords) and session["current"] == 0:
            session["chat_state"] = "collecting_data"
            print(f"DEBUG: UserID {user_id} Transitioned to 'collecting_data'. AI reply: '{reply_content}'")
        else:
            print(f"DEBUG: UserID {user_id} Staying in 'greeting'. AI reply: '{reply_content}'")
        # No data storage or session["current"] increment in greeting state.

    elif session.get("chat_state") == "collecting_data":
        print(f"DEBUG: UserID {user_id} in 'collecting_data' state for field index {session['current']}. User message: '{user_message}'")
        if session["current"] < len(field_order):
            current_field_key = field_order[session["current"]]
            session["fields"][current_field_key] = user_message
            print(f"DEBUG: UserID {user_id} Stored user_message='{user_message}' for field='{current_field_key}' at index={session['current']}")
        else:
            # This case should ideally not be hit if logic is correct, means trying to store data when all fields are notionally done.
            print(f"DEBUG: UserID {user_id} Warning: In 'collecting_data' but session['current'] ({session['current']}) is out of bounds.")

        reply_content = generate_response(messages)

        # Increment current *after* data for current_field_key is stored and AI has replied.
        # This means the *next* user input will be for the *new* session["current"].
        if session["current"] < len(field_order): # Only advance if current index is valid
            # Check if data was actually stored for the field we were expecting.
            # This ensures we only advance if the user provided data for the *expected* field.
            current_field_key_just_processed = field_order[session["current"]]
            if current_field_key_just_processed in session["fields"] and \
               session["fields"].get(current_field_key_just_processed) == user_message:

                if session["current"] < len(field_order) - 1:
                    session["current"] += 1
                    print(f"DEBUG: UserID {user_id} Advanced session current to {session['current']} for field {field_order[session['current']]}")
                elif session["current"] == len(field_order) - 1:
                    session["current"] += 1
                    session["chat_state"] = "completed"
                    print(f"DEBUG: UserID {user_id} All fields processed. session current is now {session['current']}. State: {session['chat_state']}.")
            else:
                print(f"DEBUG: UserID {user_id} Data for field {current_field_key_just_processed} not stored or mismatch; not advancing session['current'].")
        else:
             print(f"DEBUG: UserID {user_id} session['current'] ({session['current']}) already past end of field_order or invalid.")


    elif session.get("chat_state") == "completed":
        print(f"DEBUG: UserID {user_id} in 'completed' state. User message: '{user_message}'")
        # If the conversation is 'completed', the AI should ideally just give polite closing remarks.
        # Or, we could prevent further processing/LLM calls if strict completion is desired.
        # For now, let it respond. System prompt guides it to give a final message.
        reply_content = generate_response(messages)

    else: # Should not happen
        print(f"ERROR: UserID {user_id} Unknown chat_state: {session.get('chat_state')}")
        reply_content = "ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน ูู ุงููุธุงู."


    messages.append({"role": "assistant", "content": reply_content})
    return jsonify({"reply": reply_content})

# ... (rest of the file remains the same) ...

@app.route("/speak", methods=["POST"])
def speak():
    data = request.get_json()
    text = data.get("text")

    if not text:
        return jsonify({"error": "No text provided"}), 400

    url = "https://api.elevenlabs.io/v1/text-to-speech/EXAVITQu4vr4xnSDxMaL"
    headers = {
        "xi-api-key": ELEVEN_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "text": text,
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.4,
            "similarity_boost": 0.85
        }
    }

    response = requests.post(url, json=payload, headers=headers)
    if response.status_code != 200:
        return jsonify({"error": "TTS failed", "details": response.text}), 500

    audio_path = os.path.join(tempfile.gettempdir(), "speech.mp3")
    with open(audio_path, "wb") as f:
        f.write(response.content)

    return send_file(audio_path, mimetype="audio/mpeg")

@app.route("/generate", methods=["POST"])
def generate():
    data = request.get_json()
    fields = data.get("fields")

    doc = Document("police_report_template.docx")
    for paragraph in doc.paragraphs:
        for key, val in fields.items():
            if f"{{{{{key}}}}}" in paragraph.text:
                for run in paragraph.runs:
                    if f"{{{{{key}}}}}" in run.text:
                        run.text = run.text.replace(f"{{{{{key}}}}}", val)
                        paragraph.paragraph_format.right_to_left = True
                        paragraph.alignment = 2
                        run.font.name = 'Dubai'
                        run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Dubai')
                        run.font.size = Pt(13)

    output_path = os.path.join(tempfile.gettempdir(), "final_report.docx")
    doc.save(output_path)
    send_email_with_attachment(output_path)
    return send_file(output_path, as_attachment=True)

def send_email_with_attachment(file_path):
    sender_email = os.getenv("SENDER_EMAIL")
    receiver_email = os.getenv("RECEIVER_EMAIL")
    password = os.getenv("EMAIL_PASSWORD")

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg['Subject'] = "๐ ุชูุฑูุฑ ุฌุฏูุฏ ูู ุงููุณุงุนุฏ ุงูุฐูู"
    msg.attach(MIMEText("ุชู ุฅุฑูุงู ุงูุชูุฑูุฑ ุงูููู ุงูุฐู ุชู ุฅูุดุงุคู ุชููุงุฆููุง.", 'plain'))

    with open(file_path, "rb") as attachment:
        part = MIMEBase('application', 'octet-stream')
        part.set_payload(attachment.read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', f'attachment; filename={os.path.basename(file_path)}')
        msg.attach(part)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
        server.login(sender_email, password)
        server.send_message(msg)

@app.route("/get-session", methods=["GET"])
def get_session():
    user_id = request.args.get("user_id")
    session = sessions.get(user_id)
    if session:
        return jsonify(session)
    return jsonify({"error": "Session not found"}), 404

@app.route("/")
def index():
    return send_from_directory("static", "index.html")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
